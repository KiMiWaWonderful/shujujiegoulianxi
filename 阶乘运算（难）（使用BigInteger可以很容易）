问题描述　　
输入一个正整数n，输出n!的值。其中n!=1*2*3*…*n。
算法描述　　
n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来表示一个大整数a，A[0]表示a的个位，A[1]表示a的十位，依次类推。　　
将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。　　
首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。
输入格式　　
输入包含一个正整数n，n<=1000。
输出格式　　
输出n!的准确值。
样例输入
10
样例输出
3628800

（我的做法）（错误）

public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n];

        for (int i = 0 ;i<n;i++){

            a[i] = i+1;

        }

        int sum = 1;

        for (int i = 0; i <n ; i++) {
            sum = sum * a[i];

        }

        System.out.println(sum);
    }


（另一种做法）（正确）（不懂）

 public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int[] a = new int[n];
        scan.close();
        a[0] = 1;
        int count = 0, count2 = 0;
        for (int i = 2; i <= n; i++) {
            int jw = 0;
            for (int j = 0; j < a.length; j++) {
                int temp = a[j] * i + jw;
                if (temp == 0 && i != 2 && count2 <= j)
                    break;
                a[j] = temp % 10;
                jw = temp / 10;
                if (i != 2)
                    count = j;
            }
            count2 = count;
        }
        for (int i = count; i >= 0; i--) {
            System.out.print(a[i]);
        }
        System.out.println();
    }
    
    
    （另一种做法，使用java函数）
    
     public static BigInteger f(BigInteger n) {
        BigInteger bd1=new BigInteger("1");
        BigInteger bd2=new BigInteger("2");
        BigInteger sum=bd1;
        while (n.compareTo(bd1)>0){//如果n比1大
            sum=sum.multiply(n.multiply(n.subtract(bd1)));//sum= sum*((n-1)*n)
            n=n.subtract(bd2);//n=n-2;
        }
        return sum;
    }
    public static void main(String[] args) {

        Scanner in=new Scanner(System.in);
        BigInteger n=in.nextBigInteger();
        System.out.println(f(n));
    }
    

（使用java函数的另一种写法）

 protected static ArrayList table = new ArrayList();
    static{
        table.add(BigInteger.valueOf(1));
    }
    public static synchronized BigInteger factorial(int x){
        for (int size = table.size();size<=x;size++){
            BigInteger lastfact = (BigInteger) table.get(size-1);
            BigInteger nextfact = lastfact.multiply(BigInteger.valueOf(size));
            table.add(nextfact);
        }
        return (BigInteger)table.get(x);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(factorial(n));
    }
    
    
    
    （使用BigInteger更简洁的做法）
    
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        BigInteger bi=new BigInteger("1");
        for(int i=2;i<=n;i++){
            bi=bi.multiply(new BigInteger(String.valueOf(i)));
        }
        System.out.println(bi);
    }
    
